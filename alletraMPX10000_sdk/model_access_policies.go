/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccessPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPolicies{}

// AccessPolicies Response Body for device-type7 access policies
type AccessPolicies struct {
	Items []AccessPolicy `json:"items,omitempty"`
	PageLimit NullableInt64 `json:"pageLimit,omitempty"`
	PageOffset NullableInt64 `json:"pageOffset,omitempty"`
	Total NullableInt64 `json:"total,omitempty"`
}

// NewAccessPolicies instantiates a new AccessPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPolicies() *AccessPolicies {
	this := AccessPolicies{}
	return &this
}

// NewAccessPoliciesWithDefaults instantiates a new AccessPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPoliciesWithDefaults() *AccessPolicies {
	this := AccessPolicies{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessPolicies) GetItems() []AccessPolicy {
	if o == nil {
		var ret []AccessPolicy
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessPolicies) GetItemsOk() ([]AccessPolicy, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AccessPolicies) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AccessPolicy and assigns it to the Items field.
func (o *AccessPolicies) SetItems(v []AccessPolicy) {
	o.Items = v
}

// GetPageLimit returns the PageLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessPolicies) GetPageLimit() int64 {
	if o == nil || IsNil(o.PageLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.PageLimit.Get()
}

// GetPageLimitOk returns a tuple with the PageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessPolicies) GetPageLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PageLimit.Get(), o.PageLimit.IsSet()
}

// HasPageLimit returns a boolean if a field has been set.
func (o *AccessPolicies) HasPageLimit() bool {
	if o != nil && o.PageLimit.IsSet() {
		return true
	}

	return false
}

// SetPageLimit gets a reference to the given NullableInt64 and assigns it to the PageLimit field.
func (o *AccessPolicies) SetPageLimit(v int64) {
	o.PageLimit.Set(&v)
}
// SetPageLimitNil sets the value for PageLimit to be an explicit nil
func (o *AccessPolicies) SetPageLimitNil() {
	o.PageLimit.Set(nil)
}

// UnsetPageLimit ensures that no value is present for PageLimit, not even an explicit nil
func (o *AccessPolicies) UnsetPageLimit() {
	o.PageLimit.Unset()
}

// GetPageOffset returns the PageOffset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessPolicies) GetPageOffset() int64 {
	if o == nil || IsNil(o.PageOffset.Get()) {
		var ret int64
		return ret
	}
	return *o.PageOffset.Get()
}

// GetPageOffsetOk returns a tuple with the PageOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessPolicies) GetPageOffsetOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PageOffset.Get(), o.PageOffset.IsSet()
}

// HasPageOffset returns a boolean if a field has been set.
func (o *AccessPolicies) HasPageOffset() bool {
	if o != nil && o.PageOffset.IsSet() {
		return true
	}

	return false
}

// SetPageOffset gets a reference to the given NullableInt64 and assigns it to the PageOffset field.
func (o *AccessPolicies) SetPageOffset(v int64) {
	o.PageOffset.Set(&v)
}
// SetPageOffsetNil sets the value for PageOffset to be an explicit nil
func (o *AccessPolicies) SetPageOffsetNil() {
	o.PageOffset.Set(nil)
}

// UnsetPageOffset ensures that no value is present for PageOffset, not even an explicit nil
func (o *AccessPolicies) UnsetPageOffset() {
	o.PageOffset.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessPolicies) GetTotal() int64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret int64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessPolicies) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *AccessPolicies) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt64 and assigns it to the Total field.
func (o *AccessPolicies) SetTotal(v int64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *AccessPolicies) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *AccessPolicies) UnsetTotal() {
	o.Total.Unset()
}

func (o AccessPolicies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.PageLimit.IsSet() {
		toSerialize["pageLimit"] = o.PageLimit.Get()
	}
	if o.PageOffset.IsSet() {
		toSerialize["pageOffset"] = o.PageOffset.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	return toSerialize, nil
}

type NullableAccessPolicies struct {
	value *AccessPolicies
	isSet bool
}

func (v NullableAccessPolicies) Get() *AccessPolicies {
	return v.value
}

func (v *NullableAccessPolicies) Set(val *AccessPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPolicies(val *AccessPolicies) *NullableAccessPolicies {
	return &NullableAccessPolicies{value: val, isSet: true}
}

func (v NullableAccessPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


