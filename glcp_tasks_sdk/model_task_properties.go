/*
Tasks REST APIs

APIs to get information about the tasks

API version: 0.1.0
Contact: sc-eng-tasks-ms@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TaskProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskProperties{}

// TaskProperties struct for TaskProperties
type TaskProperties struct {
	// A link to be displayed in the Tasks UI. This can be used when a task is paused to take the user to the console UI page with information on how to unpause the task, or for more general information when the task is in other states.
	AdditionalDetails *TaskConsoleReference `json:"additionalDetails,omitempty"`
	// Resources that are associated with the task. These may be created by the task or other resources that are involved in the task.
	AssociatedResources []ResourceReference `json:"associatedResources,omitempty"`
	// A list of sub-tasks that were initiated by this task.
	ChildTasks []ResourceReference `json:"childTasks,omitempty"`
	// The time this task was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The displayed name for the task.
	DisplayName *string `json:"displayName,omitempty"`
	// The time this task completed.
	EndedAt NullableTime `json:"endedAt,omitempty"`
	// The error response status of the operation.
	Error NullableErrorResponse `json:"error,omitempty"`
	// An estimate of how long the task will run before completing.
	EstimatedRunningDurationMinutes *int32 `json:"estimatedRunningDurationMinutes,omitempty"`
	// A list of groups associated with this task.
	Groups []GroupIDNamePair `json:"groups,omitempty"`
	// The health status indicates if any errors or problems have been encountered during the processing of the task.  Expected values are OK, ERROR, WARNING, UNKNOWN, and UNSPECIFIED. 
	HealthStatus *string `json:"healthStatus,omitempty"`
	// Time stamped messages that record the progress of the task.
	LogMessages []TaskLogMessage `json:"logMessages,omitempty"`
	// The parent is the task that initiated this sub-task. If this task is not a sub-task this will be null.
	ParentTask NullableResourceReferenceWithId `json:"parentTask,omitempty"`
	// A percentage representation of progress to completion.
	ProgressPercent *int32 `json:"progressPercent,omitempty"`
	// Recommendations on how to fix failing tasks.
	Recommendations []TaskRecommendations `json:"recommendations,omitempty"`
	// The root of the tree of tasks. If this task is not part of a tree this will be null.
	RootTask NullableResourceReferenceWithId `json:"rootTask,omitempty"`
	// List of services this task belongs to, can be used to filter to specific services in the UI
	Services []string `json:"services,omitempty"`
	// The resource that was used to initiate the task.
	SourceResource NullableResourceReference `json:"sourceResource,omitempty"`
	// The time this task was started.
	StartedAt NullableTime `json:"startedAt,omitempty"`
	// A message to indicate the current state of the task, for example the current step in a workflow. Expected values are INITIALIZED, RUNNING, FAILED, SUCCEEDED, TIMEDOUT, PAUSED, and UNSPECIFIED. 
	State *string `json:"state,omitempty"`
	// The count of the number of child Tasks below this one, recursively.
	SubtreeTaskCount *int32 `json:"subtreeTaskCount,omitempty"`
	// This attribute suggests a suitable interval to use when polling for progress. Where specified this will be based on the frequency with which the task is likely to be updated.
	SuggestedPollingIntervalSeconds *int32 `json:"suggestedPollingIntervalSeconds,omitempty"`
	// The time this task was last updated.
	UpdatedAt NullableTime `json:"updatedAt,omitempty"`
	// The ID or email address of the user that initiated the task.
	UserId *string `json:"userId,omitempty"`
}

// NewTaskProperties instantiates a new TaskProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskProperties() *TaskProperties {
	this := TaskProperties{}
	return &this
}

// NewTaskPropertiesWithDefaults instantiates a new TaskProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskPropertiesWithDefaults() *TaskProperties {
	this := TaskProperties{}
	return &this
}

// GetAdditionalDetails returns the AdditionalDetails field value if set, zero value otherwise.
func (o *TaskProperties) GetAdditionalDetails() TaskConsoleReference {
	if o == nil || IsNil(o.AdditionalDetails) {
		var ret TaskConsoleReference
		return ret
	}
	return *o.AdditionalDetails
}

// GetAdditionalDetailsOk returns a tuple with the AdditionalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetAdditionalDetailsOk() (*TaskConsoleReference, bool) {
	if o == nil || IsNil(o.AdditionalDetails) {
		return nil, false
	}
	return o.AdditionalDetails, true
}

// HasAdditionalDetails returns a boolean if a field has been set.
func (o *TaskProperties) HasAdditionalDetails() bool {
	if o != nil && !IsNil(o.AdditionalDetails) {
		return true
	}

	return false
}

// SetAdditionalDetails gets a reference to the given TaskConsoleReference and assigns it to the AdditionalDetails field.
func (o *TaskProperties) SetAdditionalDetails(v TaskConsoleReference) {
	o.AdditionalDetails = &v
}

// GetAssociatedResources returns the AssociatedResources field value if set, zero value otherwise.
func (o *TaskProperties) GetAssociatedResources() []ResourceReference {
	if o == nil || IsNil(o.AssociatedResources) {
		var ret []ResourceReference
		return ret
	}
	return o.AssociatedResources
}

// GetAssociatedResourcesOk returns a tuple with the AssociatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetAssociatedResourcesOk() ([]ResourceReference, bool) {
	if o == nil || IsNil(o.AssociatedResources) {
		return nil, false
	}
	return o.AssociatedResources, true
}

// HasAssociatedResources returns a boolean if a field has been set.
func (o *TaskProperties) HasAssociatedResources() bool {
	if o != nil && !IsNil(o.AssociatedResources) {
		return true
	}

	return false
}

// SetAssociatedResources gets a reference to the given []ResourceReference and assigns it to the AssociatedResources field.
func (o *TaskProperties) SetAssociatedResources(v []ResourceReference) {
	o.AssociatedResources = v
}

// GetChildTasks returns the ChildTasks field value if set, zero value otherwise.
func (o *TaskProperties) GetChildTasks() []ResourceReference {
	if o == nil || IsNil(o.ChildTasks) {
		var ret []ResourceReference
		return ret
	}
	return o.ChildTasks
}

// GetChildTasksOk returns a tuple with the ChildTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetChildTasksOk() ([]ResourceReference, bool) {
	if o == nil || IsNil(o.ChildTasks) {
		return nil, false
	}
	return o.ChildTasks, true
}

// HasChildTasks returns a boolean if a field has been set.
func (o *TaskProperties) HasChildTasks() bool {
	if o != nil && !IsNil(o.ChildTasks) {
		return true
	}

	return false
}

// SetChildTasks gets a reference to the given []ResourceReference and assigns it to the ChildTasks field.
func (o *TaskProperties) SetChildTasks(v []ResourceReference) {
	o.ChildTasks = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TaskProperties) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TaskProperties) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TaskProperties) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TaskProperties) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TaskProperties) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TaskProperties) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *TaskProperties) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *TaskProperties) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}
// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *TaskProperties) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *TaskProperties) UnsetEndedAt() {
	o.EndedAt.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetError() ErrorResponse {
	if o == nil || IsNil(o.Error.Get()) {
		var ret ErrorResponse
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetErrorOk() (*ErrorResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *TaskProperties) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableErrorResponse and assigns it to the Error field.
func (o *TaskProperties) SetError(v ErrorResponse) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *TaskProperties) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *TaskProperties) UnsetError() {
	o.Error.Unset()
}

// GetEstimatedRunningDurationMinutes returns the EstimatedRunningDurationMinutes field value if set, zero value otherwise.
func (o *TaskProperties) GetEstimatedRunningDurationMinutes() int32 {
	if o == nil || IsNil(o.EstimatedRunningDurationMinutes) {
		var ret int32
		return ret
	}
	return *o.EstimatedRunningDurationMinutes
}

// GetEstimatedRunningDurationMinutesOk returns a tuple with the EstimatedRunningDurationMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetEstimatedRunningDurationMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.EstimatedRunningDurationMinutes) {
		return nil, false
	}
	return o.EstimatedRunningDurationMinutes, true
}

// HasEstimatedRunningDurationMinutes returns a boolean if a field has been set.
func (o *TaskProperties) HasEstimatedRunningDurationMinutes() bool {
	if o != nil && !IsNil(o.EstimatedRunningDurationMinutes) {
		return true
	}

	return false
}

// SetEstimatedRunningDurationMinutes gets a reference to the given int32 and assigns it to the EstimatedRunningDurationMinutes field.
func (o *TaskProperties) SetEstimatedRunningDurationMinutes(v int32) {
	o.EstimatedRunningDurationMinutes = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *TaskProperties) GetGroups() []GroupIDNamePair {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupIDNamePair
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetGroupsOk() ([]GroupIDNamePair, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *TaskProperties) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupIDNamePair and assigns it to the Groups field.
func (o *TaskProperties) SetGroups(v []GroupIDNamePair) {
	o.Groups = v
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *TaskProperties) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *TaskProperties) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *TaskProperties) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetLogMessages returns the LogMessages field value if set, zero value otherwise.
func (o *TaskProperties) GetLogMessages() []TaskLogMessage {
	if o == nil || IsNil(o.LogMessages) {
		var ret []TaskLogMessage
		return ret
	}
	return o.LogMessages
}

// GetLogMessagesOk returns a tuple with the LogMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetLogMessagesOk() ([]TaskLogMessage, bool) {
	if o == nil || IsNil(o.LogMessages) {
		return nil, false
	}
	return o.LogMessages, true
}

// HasLogMessages returns a boolean if a field has been set.
func (o *TaskProperties) HasLogMessages() bool {
	if o != nil && !IsNil(o.LogMessages) {
		return true
	}

	return false
}

// SetLogMessages gets a reference to the given []TaskLogMessage and assigns it to the LogMessages field.
func (o *TaskProperties) SetLogMessages(v []TaskLogMessage) {
	o.LogMessages = v
}

// GetParentTask returns the ParentTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetParentTask() ResourceReferenceWithId {
	if o == nil || IsNil(o.ParentTask.Get()) {
		var ret ResourceReferenceWithId
		return ret
	}
	return *o.ParentTask.Get()
}

// GetParentTaskOk returns a tuple with the ParentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetParentTaskOk() (*ResourceReferenceWithId, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTask.Get(), o.ParentTask.IsSet()
}

// HasParentTask returns a boolean if a field has been set.
func (o *TaskProperties) HasParentTask() bool {
	if o != nil && o.ParentTask.IsSet() {
		return true
	}

	return false
}

// SetParentTask gets a reference to the given NullableResourceReferenceWithId and assigns it to the ParentTask field.
func (o *TaskProperties) SetParentTask(v ResourceReferenceWithId) {
	o.ParentTask.Set(&v)
}
// SetParentTaskNil sets the value for ParentTask to be an explicit nil
func (o *TaskProperties) SetParentTaskNil() {
	o.ParentTask.Set(nil)
}

// UnsetParentTask ensures that no value is present for ParentTask, not even an explicit nil
func (o *TaskProperties) UnsetParentTask() {
	o.ParentTask.Unset()
}

// GetProgressPercent returns the ProgressPercent field value if set, zero value otherwise.
func (o *TaskProperties) GetProgressPercent() int32 {
	if o == nil || IsNil(o.ProgressPercent) {
		var ret int32
		return ret
	}
	return *o.ProgressPercent
}

// GetProgressPercentOk returns a tuple with the ProgressPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetProgressPercentOk() (*int32, bool) {
	if o == nil || IsNil(o.ProgressPercent) {
		return nil, false
	}
	return o.ProgressPercent, true
}

// HasProgressPercent returns a boolean if a field has been set.
func (o *TaskProperties) HasProgressPercent() bool {
	if o != nil && !IsNil(o.ProgressPercent) {
		return true
	}

	return false
}

// SetProgressPercent gets a reference to the given int32 and assigns it to the ProgressPercent field.
func (o *TaskProperties) SetProgressPercent(v int32) {
	o.ProgressPercent = &v
}

// GetRecommendations returns the Recommendations field value if set, zero value otherwise.
func (o *TaskProperties) GetRecommendations() []TaskRecommendations {
	if o == nil || IsNil(o.Recommendations) {
		var ret []TaskRecommendations
		return ret
	}
	return o.Recommendations
}

// GetRecommendationsOk returns a tuple with the Recommendations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetRecommendationsOk() ([]TaskRecommendations, bool) {
	if o == nil || IsNil(o.Recommendations) {
		return nil, false
	}
	return o.Recommendations, true
}

// HasRecommendations returns a boolean if a field has been set.
func (o *TaskProperties) HasRecommendations() bool {
	if o != nil && !IsNil(o.Recommendations) {
		return true
	}

	return false
}

// SetRecommendations gets a reference to the given []TaskRecommendations and assigns it to the Recommendations field.
func (o *TaskProperties) SetRecommendations(v []TaskRecommendations) {
	o.Recommendations = v
}

// GetRootTask returns the RootTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetRootTask() ResourceReferenceWithId {
	if o == nil || IsNil(o.RootTask.Get()) {
		var ret ResourceReferenceWithId
		return ret
	}
	return *o.RootTask.Get()
}

// GetRootTaskOk returns a tuple with the RootTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetRootTaskOk() (*ResourceReferenceWithId, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootTask.Get(), o.RootTask.IsSet()
}

// HasRootTask returns a boolean if a field has been set.
func (o *TaskProperties) HasRootTask() bool {
	if o != nil && o.RootTask.IsSet() {
		return true
	}

	return false
}

// SetRootTask gets a reference to the given NullableResourceReferenceWithId and assigns it to the RootTask field.
func (o *TaskProperties) SetRootTask(v ResourceReferenceWithId) {
	o.RootTask.Set(&v)
}
// SetRootTaskNil sets the value for RootTask to be an explicit nil
func (o *TaskProperties) SetRootTaskNil() {
	o.RootTask.Set(nil)
}

// UnsetRootTask ensures that no value is present for RootTask, not even an explicit nil
func (o *TaskProperties) UnsetRootTask() {
	o.RootTask.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *TaskProperties) GetServices() []string {
	if o == nil || IsNil(o.Services) {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *TaskProperties) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *TaskProperties) SetServices(v []string) {
	o.Services = v
}

// GetSourceResource returns the SourceResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetSourceResource() ResourceReference {
	if o == nil || IsNil(o.SourceResource.Get()) {
		var ret ResourceReference
		return ret
	}
	return *o.SourceResource.Get()
}

// GetSourceResourceOk returns a tuple with the SourceResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetSourceResourceOk() (*ResourceReference, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceResource.Get(), o.SourceResource.IsSet()
}

// HasSourceResource returns a boolean if a field has been set.
func (o *TaskProperties) HasSourceResource() bool {
	if o != nil && o.SourceResource.IsSet() {
		return true
	}

	return false
}

// SetSourceResource gets a reference to the given NullableResourceReference and assigns it to the SourceResource field.
func (o *TaskProperties) SetSourceResource(v ResourceReference) {
	o.SourceResource.Set(&v)
}
// SetSourceResourceNil sets the value for SourceResource to be an explicit nil
func (o *TaskProperties) SetSourceResourceNil() {
	o.SourceResource.Set(nil)
}

// UnsetSourceResource ensures that no value is present for SourceResource, not even an explicit nil
func (o *TaskProperties) UnsetSourceResource() {
	o.SourceResource.Unset()
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *TaskProperties) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *TaskProperties) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}
// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *TaskProperties) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *TaskProperties) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TaskProperties) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TaskProperties) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TaskProperties) SetState(v string) {
	o.State = &v
}

// GetSubtreeTaskCount returns the SubtreeTaskCount field value if set, zero value otherwise.
func (o *TaskProperties) GetSubtreeTaskCount() int32 {
	if o == nil || IsNil(o.SubtreeTaskCount) {
		var ret int32
		return ret
	}
	return *o.SubtreeTaskCount
}

// GetSubtreeTaskCountOk returns a tuple with the SubtreeTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetSubtreeTaskCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SubtreeTaskCount) {
		return nil, false
	}
	return o.SubtreeTaskCount, true
}

// HasSubtreeTaskCount returns a boolean if a field has been set.
func (o *TaskProperties) HasSubtreeTaskCount() bool {
	if o != nil && !IsNil(o.SubtreeTaskCount) {
		return true
	}

	return false
}

// SetSubtreeTaskCount gets a reference to the given int32 and assigns it to the SubtreeTaskCount field.
func (o *TaskProperties) SetSubtreeTaskCount(v int32) {
	o.SubtreeTaskCount = &v
}

// GetSuggestedPollingIntervalSeconds returns the SuggestedPollingIntervalSeconds field value if set, zero value otherwise.
func (o *TaskProperties) GetSuggestedPollingIntervalSeconds() int32 {
	if o == nil || IsNil(o.SuggestedPollingIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.SuggestedPollingIntervalSeconds
}

// GetSuggestedPollingIntervalSecondsOk returns a tuple with the SuggestedPollingIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetSuggestedPollingIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.SuggestedPollingIntervalSeconds) {
		return nil, false
	}
	return o.SuggestedPollingIntervalSeconds, true
}

// HasSuggestedPollingIntervalSeconds returns a boolean if a field has been set.
func (o *TaskProperties) HasSuggestedPollingIntervalSeconds() bool {
	if o != nil && !IsNil(o.SuggestedPollingIntervalSeconds) {
		return true
	}

	return false
}

// SetSuggestedPollingIntervalSeconds gets a reference to the given int32 and assigns it to the SuggestedPollingIntervalSeconds field.
func (o *TaskProperties) SetSuggestedPollingIntervalSeconds(v int32) {
	o.SuggestedPollingIntervalSeconds = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskProperties) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskProperties) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TaskProperties) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *TaskProperties) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *TaskProperties) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *TaskProperties) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TaskProperties) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TaskProperties) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TaskProperties) SetUserId(v string) {
	o.UserId = &v
}

func (o TaskProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalDetails) {
		toSerialize["additionalDetails"] = o.AdditionalDetails
	}
	if !IsNil(o.AssociatedResources) {
		toSerialize["associatedResources"] = o.AssociatedResources
	}
	if !IsNil(o.ChildTasks) {
		toSerialize["childTasks"] = o.ChildTasks
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.EndedAt.IsSet() {
		toSerialize["endedAt"] = o.EndedAt.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if !IsNil(o.EstimatedRunningDurationMinutes) {
		toSerialize["estimatedRunningDurationMinutes"] = o.EstimatedRunningDurationMinutes
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.HealthStatus) {
		toSerialize["healthStatus"] = o.HealthStatus
	}
	if !IsNil(o.LogMessages) {
		toSerialize["logMessages"] = o.LogMessages
	}
	if o.ParentTask.IsSet() {
		toSerialize["parentTask"] = o.ParentTask.Get()
	}
	if !IsNil(o.ProgressPercent) {
		toSerialize["progressPercent"] = o.ProgressPercent
	}
	if !IsNil(o.Recommendations) {
		toSerialize["recommendations"] = o.Recommendations
	}
	if o.RootTask.IsSet() {
		toSerialize["rootTask"] = o.RootTask.Get()
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if o.SourceResource.IsSet() {
		toSerialize["sourceResource"] = o.SourceResource.Get()
	}
	if o.StartedAt.IsSet() {
		toSerialize["startedAt"] = o.StartedAt.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.SubtreeTaskCount) {
		toSerialize["subtreeTaskCount"] = o.SubtreeTaskCount
	}
	if !IsNil(o.SuggestedPollingIntervalSeconds) {
		toSerialize["suggestedPollingIntervalSeconds"] = o.SuggestedPollingIntervalSeconds
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableTaskProperties struct {
	value *TaskProperties
	isSet bool
}

func (v NullableTaskProperties) Get() *TaskProperties {
	return v.value
}

func (v *NullableTaskProperties) Set(val *TaskProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskProperties(val *TaskProperties) *NullableTaskProperties {
	return &NullableTaskProperties{value: val, isSet: true}
}

func (v NullableTaskProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


