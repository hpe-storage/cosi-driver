/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PolicyStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyStatement{}

// PolicyStatement device-type7 access policy statement
type PolicyStatement struct {
	Action []string `json:"action,omitempty"`
	Condition map[string]map[string]PolicyConditionValue `json:"condition,omitempty"`
	Effect *string `json:"effect,omitempty"`
	Resource []string `json:"resource,omitempty"`
	Sid NullableString `json:"sid,omitempty"`
}

// NewPolicyStatement instantiates a new PolicyStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyStatement() *PolicyStatement {
	this := PolicyStatement{}
	return &this
}

// NewPolicyStatementWithDefaults instantiates a new PolicyStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyStatementWithDefaults() *PolicyStatement {
	this := PolicyStatement{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PolicyStatement) GetAction() []string {
	if o == nil || IsNil(o.Action) {
		var ret []string
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyStatement) GetActionOk() ([]string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PolicyStatement) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []string and assigns it to the Action field.
func (o *PolicyStatement) SetAction(v []string) {
	o.Action = v
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyStatement) GetCondition() map[string]map[string]PolicyConditionValue {
	if o == nil {
		var ret map[string]map[string]PolicyConditionValue
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyStatement) GetConditionOk() (*map[string]map[string]PolicyConditionValue, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return &o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *PolicyStatement) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given map[string]map[string]PolicyConditionValue and assigns it to the Condition field.
func (o *PolicyStatement) SetCondition(v map[string]map[string]PolicyConditionValue) {
	o.Condition = v
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *PolicyStatement) GetEffect() string {
	if o == nil || IsNil(o.Effect) {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyStatement) GetEffectOk() (*string, bool) {
	if o == nil || IsNil(o.Effect) {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *PolicyStatement) HasEffect() bool {
	if o != nil && !IsNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *PolicyStatement) SetEffect(v string) {
	o.Effect = &v
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyStatement) GetResource() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyStatement) GetResourceOk() ([]string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *PolicyStatement) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given []string and assigns it to the Resource field.
func (o *PolicyStatement) SetResource(v []string) {
	o.Resource = v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyStatement) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyStatement) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *PolicyStatement) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *PolicyStatement) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *PolicyStatement) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *PolicyStatement) UnsetSid() {
	o.Sid.Unset()
}

func (o PolicyStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	return toSerialize, nil
}

type NullablePolicyStatement struct {
	value *PolicyStatement
	isSet bool
}

func (v NullablePolicyStatement) Get() *PolicyStatement {
	return v.value
}

func (v *NullablePolicyStatement) Set(val *PolicyStatement) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyStatement) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyStatement(val *PolicyStatement) *NullablePolicyStatement {
	return &NullablePolicyStatement{value: val, isSet: true}
}

func (v NullablePolicyStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


