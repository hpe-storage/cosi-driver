/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateAccessPolicyBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccessPolicyBody{}

// UpdateAccessPolicyBody Access Policy update request body
type UpdateAccessPolicyBody struct {
	Statement []PolicyStatementInput `json:"statement"`
	// access policy version
	Version string `json:"version"`
}

type _UpdateAccessPolicyBody UpdateAccessPolicyBody

// NewUpdateAccessPolicyBody instantiates a new UpdateAccessPolicyBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccessPolicyBody(statement []PolicyStatementInput, version string) *UpdateAccessPolicyBody {
	this := UpdateAccessPolicyBody{}
	this.Statement = statement
	this.Version = version
	return &this
}

// NewUpdateAccessPolicyBodyWithDefaults instantiates a new UpdateAccessPolicyBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccessPolicyBodyWithDefaults() *UpdateAccessPolicyBody {
	this := UpdateAccessPolicyBody{}
	return &this
}

// GetStatement returns the Statement field value
func (o *UpdateAccessPolicyBody) GetStatement() []PolicyStatementInput {
	if o == nil {
		var ret []PolicyStatementInput
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessPolicyBody) GetStatementOk() ([]PolicyStatementInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Statement, true
}

// SetStatement sets field value
func (o *UpdateAccessPolicyBody) SetStatement(v []PolicyStatementInput) {
	o.Statement = v
}

// GetVersion returns the Version field value
func (o *UpdateAccessPolicyBody) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessPolicyBody) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *UpdateAccessPolicyBody) SetVersion(v string) {
	o.Version = v
}

func (o UpdateAccessPolicyBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccessPolicyBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statement"] = o.Statement
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *UpdateAccessPolicyBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statement",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAccessPolicyBody := _UpdateAccessPolicyBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAccessPolicyBody)

	if err != nil {
		return err
	}

	*o = UpdateAccessPolicyBody(varUpdateAccessPolicyBody)

	return err
}

type NullableUpdateAccessPolicyBody struct {
	value *UpdateAccessPolicyBody
	isSet bool
}

func (v NullableUpdateAccessPolicyBody) Get() *UpdateAccessPolicyBody {
	return v.value
}

func (v *NullableUpdateAccessPolicyBody) Set(val *UpdateAccessPolicyBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccessPolicyBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccessPolicyBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccessPolicyBody(val *UpdateAccessPolicyBody) *NullableUpdateAccessPolicyBody {
	return &NullableUpdateAccessPolicyBody{value: val, isSet: true}
}

func (v NullableUpdateAccessPolicyBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccessPolicyBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


