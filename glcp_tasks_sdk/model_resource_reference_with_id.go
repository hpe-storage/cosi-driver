/*
Tasks REST APIs

APIs to get information about the tasks

API version: 0.1.0
Contact: sc-eng-tasks-ms@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceReferenceWithId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceReferenceWithId{}

// ResourceReferenceWithId References to other resources include the name, type, URI and Id of the other resource.
type ResourceReferenceWithId struct {
	Name *string `json:"name,omitempty"`
	ResourceUri string `json:"resourceUri"`
	Type string `json:"type"`
	Id *string `json:"id,omitempty"`
}

type _ResourceReferenceWithId ResourceReferenceWithId

// NewResourceReferenceWithId instantiates a new ResourceReferenceWithId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReferenceWithId(resourceUri string, type_ string) *ResourceReferenceWithId {
	this := ResourceReferenceWithId{}
	this.ResourceUri = resourceUri
	this.Type = type_
	return &this
}

// NewResourceReferenceWithIdWithDefaults instantiates a new ResourceReferenceWithId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceWithIdWithDefaults() *ResourceReferenceWithId {
	this := ResourceReferenceWithId{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceReferenceWithId) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceWithId) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceReferenceWithId) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceReferenceWithId) SetName(v string) {
	o.Name = &v
}

// GetResourceUri returns the ResourceUri field value
func (o *ResourceReferenceWithId) GetResourceUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceUri
}

// GetResourceUriOk returns a tuple with the ResourceUri field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceWithId) GetResourceUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceUri, true
}

// SetResourceUri sets field value
func (o *ResourceReferenceWithId) SetResourceUri(v string) {
	o.ResourceUri = v
}

// GetType returns the Type field value
func (o *ResourceReferenceWithId) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceWithId) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceReferenceWithId) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceReferenceWithId) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceWithId) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceReferenceWithId) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceReferenceWithId) SetId(v string) {
	o.Id = &v
}

func (o ResourceReferenceWithId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReferenceWithId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["resourceUri"] = o.ResourceUri
	toSerialize["type"] = o.Type
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *ResourceReferenceWithId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceUri",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceReferenceWithId := _ResourceReferenceWithId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceReferenceWithId)

	if err != nil {
		return err
	}

	*o = ResourceReferenceWithId(varResourceReferenceWithId)

	return err
}

type NullableResourceReferenceWithId struct {
	value *ResourceReferenceWithId
	isSet bool
}

func (v NullableResourceReferenceWithId) Get() *ResourceReferenceWithId {
	return v.value
}

func (v *NullableResourceReferenceWithId) Set(val *ResourceReferenceWithId) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReferenceWithId) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReferenceWithId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReferenceWithId(val *ResourceReferenceWithId) *NullableResourceReferenceWithId {
	return &NullableResourceReferenceWithId{value: val, isSet: true}
}

func (v NullableResourceReferenceWithId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReferenceWithId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


