/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccessPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPolicy{}

// AccessPolicy Response body for device-type7 access policy
type AccessPolicy struct {
	Generation *int32 `json:"generation,omitempty"`
	// policy ID
	Id *string `json:"id,omitempty"`
	// Name of the policy
	Name *string `json:"name,omitempty"`
	Statement []PolicyStatement `json:"statement,omitempty"`
	// Cluster ID
	SystemUid *string `json:"systemUid,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	// Version of the policy
	Version *string `json:"version,omitempty"`
}

// NewAccessPolicy instantiates a new AccessPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPolicy() *AccessPolicy {
	this := AccessPolicy{}
	return &this
}

// NewAccessPolicyWithDefaults instantiates a new AccessPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPolicyWithDefaults() *AccessPolicy {
	this := AccessPolicy{}
	return &this
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *AccessPolicy) GetGeneration() int32 {
	if o == nil || IsNil(o.Generation) {
		var ret int32
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetGenerationOk() (*int32, bool) {
	if o == nil || IsNil(o.Generation) {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *AccessPolicy) HasGeneration() bool {
	if o != nil && !IsNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given int32 and assigns it to the Generation field.
func (o *AccessPolicy) SetGeneration(v int32) {
	o.Generation = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessPolicy) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessPolicy) SetName(v string) {
	o.Name = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *AccessPolicy) GetStatement() []PolicyStatement {
	if o == nil || IsNil(o.Statement) {
		var ret []PolicyStatement
		return ret
	}
	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetStatementOk() ([]PolicyStatement, bool) {
	if o == nil || IsNil(o.Statement) {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *AccessPolicy) HasStatement() bool {
	if o != nil && !IsNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given []PolicyStatement and assigns it to the Statement field.
func (o *AccessPolicy) SetStatement(v []PolicyStatement) {
	o.Statement = v
}

// GetSystemUid returns the SystemUid field value if set, zero value otherwise.
func (o *AccessPolicy) GetSystemUid() string {
	if o == nil || IsNil(o.SystemUid) {
		var ret string
		return ret
	}
	return *o.SystemUid
}

// GetSystemUidOk returns a tuple with the SystemUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetSystemUidOk() (*string, bool) {
	if o == nil || IsNil(o.SystemUid) {
		return nil, false
	}
	return o.SystemUid, true
}

// HasSystemUid returns a boolean if a field has been set.
func (o *AccessPolicy) HasSystemUid() bool {
	if o != nil && !IsNil(o.SystemUid) {
		return true
	}

	return false
}

// SetSystemUid gets a reference to the given string and assigns it to the SystemUid field.
func (o *AccessPolicy) SetSystemUid(v string) {
	o.SystemUid = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *AccessPolicy) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *AccessPolicy) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *AccessPolicy) SetTenantId(v string) {
	o.TenantId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AccessPolicy) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicy) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AccessPolicy) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AccessPolicy) SetVersion(v string) {
	o.Version = &v
}

func (o AccessPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Statement) {
		toSerialize["statement"] = o.Statement
	}
	if !IsNil(o.SystemUid) {
		toSerialize["systemUid"] = o.SystemUid
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAccessPolicy struct {
	value *AccessPolicy
	isSet bool
}

func (v NullableAccessPolicy) Get() *AccessPolicy {
	return v.value
}

func (v *NullableAccessPolicy) Set(val *AccessPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPolicy(val *AccessPolicy) *NullableAccessPolicy {
	return &NullableAccessPolicy{value: val, isSet: true}
}

func (v NullableAccessPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


