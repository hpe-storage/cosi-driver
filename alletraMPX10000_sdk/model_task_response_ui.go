/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskResponseUi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskResponseUi{}

// TaskResponseUi struct for TaskResponseUi
type TaskResponseUi struct {
	// Task Message task message.
	Message *string `json:"message,omitempty"`
	// Task Status Status of the task.
	Status *string `json:"status,omitempty"`
	// Task URI which can be used to monitor the status of the operation.
	TaskUri string `json:"taskUri"`
}

type _TaskResponseUi TaskResponseUi

// NewTaskResponseUi instantiates a new TaskResponseUi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResponseUi(taskUri string) *TaskResponseUi {
	this := TaskResponseUi{}
	this.TaskUri = taskUri
	return &this
}

// NewTaskResponseUiWithDefaults instantiates a new TaskResponseUi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResponseUiWithDefaults() *TaskResponseUi {
	this := TaskResponseUi{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TaskResponseUi) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseUi) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TaskResponseUi) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TaskResponseUi) SetMessage(v string) {
	o.Message = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskResponseUi) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseUi) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskResponseUi) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskResponseUi) SetStatus(v string) {
	o.Status = &v
}

// GetTaskUri returns the TaskUri field value
func (o *TaskResponseUi) GetTaskUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskUri
}

// GetTaskUriOk returns a tuple with the TaskUri field value
// and a boolean to check if the value has been set.
func (o *TaskResponseUi) GetTaskUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskUri, true
}

// SetTaskUri sets field value
func (o *TaskResponseUi) SetTaskUri(v string) {
	o.TaskUri = v
}

func (o TaskResponseUi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskResponseUi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["taskUri"] = o.TaskUri
	return toSerialize, nil
}

func (o *TaskResponseUi) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskResponseUi := _TaskResponseUi{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskResponseUi)

	if err != nil {
		return err
	}

	*o = TaskResponseUi(varTaskResponseUi)

	return err
}

type NullableTaskResponseUi struct {
	value *TaskResponseUi
	isSet bool
}

func (v NullableTaskResponseUi) Get() *TaskResponseUi {
	return v.value
}

func (v *NullableTaskResponseUi) Set(val *TaskResponseUi) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResponseUi) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResponseUi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResponseUi(val *TaskResponseUi) *NullableTaskResponseUi {
	return &NullableTaskResponseUi{value: val, isSet: true}
}

func (v NullableTaskResponseUi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResponseUi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


