/*
Device Type-7 APIs

Testing BucketsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	openapiclient "alletraMPX10000_sdk"
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_BucketsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BucketsAPIService DeviceType7CreateBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.BucketsAPI.DeviceType7CreateBucket(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketsAPIService DeviceType7DeleteBucketById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var bucketId string

		resp, httpRes, err := apiClient.BucketsAPI.DeviceType7DeleteBucketById(context.Background(), systemId, bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketsAPIService DeviceType7EditBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var bucketId string

		resp, httpRes, err := apiClient.BucketsAPI.DeviceType7EditBucket(context.Background(), systemId, bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketsAPIService DeviceType7ListBuckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.BucketsAPI.DeviceType7ListBuckets(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketsAPIService DeviceType7SingleBuckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var bucketId string

		resp, httpRes, err := apiClient.BucketsAPI.DeviceType7SingleBuckets(context.Background(), systemId, bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
