/*
Device Type-7 APIs

Testing ObjectstoreIdentitiesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	openapiclient "alletraMPX10000_sdk"
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ObjectstoreIdentitiesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ObjectstoreIdentitiesAPIService ApplyPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.ApplyPolicy(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7CreateAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7CreateAccessPolicy(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7CreateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7CreateGroup(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7CreateUser(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7DeleteAccessPolicyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var policyId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7DeleteAccessPolicyById(context.Background(), systemId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7DeleteGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var groupId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7DeleteGroupById(context.Background(), systemId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7DeleteUserById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var userId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7DeleteUserById(context.Background(), systemId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7EditUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var userId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7EditUser(context.Background(), systemId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7GetAccessPolicyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var policyId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7GetAccessPolicyById(context.Background(), systemId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7GetGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7GetGroupById(context.Background(), groupId, systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7GetSingleUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var userId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7GetSingleUser(context.Background(), systemId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7GetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7GetUser(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7ListAccessPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7ListAccessPolicies(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7ListGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7ListGroups(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7UpdateAccessPolicyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var policyId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7UpdateAccessPolicyById(context.Background(), systemId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectstoreIdentitiesAPIService DeviceType7UpdateGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string
		var groupId string

		resp, httpRes, err := apiClient.ObjectstoreIdentitiesAPI.DeviceType7UpdateGroupById(context.Background(), systemId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
