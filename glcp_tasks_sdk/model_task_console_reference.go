/*
Tasks REST APIs

APIs to get information about the tasks

API version: 0.1.0
Contact: sc-eng-tasks-ms@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskConsoleReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskConsoleReference{}

// TaskConsoleReference References to other UI link include the consoleUri
type TaskConsoleReference struct {
	ConsoleUri string `json:"consoleUri"`
}

type _TaskConsoleReference TaskConsoleReference

// NewTaskConsoleReference instantiates a new TaskConsoleReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskConsoleReference(consoleUri string) *TaskConsoleReference {
	this := TaskConsoleReference{}
	this.ConsoleUri = consoleUri
	return &this
}

// NewTaskConsoleReferenceWithDefaults instantiates a new TaskConsoleReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskConsoleReferenceWithDefaults() *TaskConsoleReference {
	this := TaskConsoleReference{}
	return &this
}

// GetConsoleUri returns the ConsoleUri field value
func (o *TaskConsoleReference) GetConsoleUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsoleUri
}

// GetConsoleUriOk returns a tuple with the ConsoleUri field value
// and a boolean to check if the value has been set.
func (o *TaskConsoleReference) GetConsoleUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsoleUri, true
}

// SetConsoleUri sets field value
func (o *TaskConsoleReference) SetConsoleUri(v string) {
	o.ConsoleUri = v
}

func (o TaskConsoleReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskConsoleReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["consoleUri"] = o.ConsoleUri
	return toSerialize, nil
}

func (o *TaskConsoleReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"consoleUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskConsoleReference := _TaskConsoleReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskConsoleReference)

	if err != nil {
		return err
	}

	*o = TaskConsoleReference(varTaskConsoleReference)

	return err
}

type NullableTaskConsoleReference struct {
	value *TaskConsoleReference
	isSet bool
}

func (v NullableTaskConsoleReference) Get() *TaskConsoleReference {
	return v.value
}

func (v *NullableTaskConsoleReference) Set(val *TaskConsoleReference) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskConsoleReference) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskConsoleReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskConsoleReference(val *TaskConsoleReference) *NullableTaskConsoleReference {
	return &NullableTaskConsoleReference{value: val, isSet: true}
}

func (v NullableTaskConsoleReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskConsoleReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


