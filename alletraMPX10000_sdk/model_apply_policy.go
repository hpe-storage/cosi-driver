/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplyPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplyPolicy{}

// ApplyPolicy Apply Policy body
type ApplyPolicy struct {
	// Name of the user or group
	Name string `json:"name"`
	// list of policies to apply
	Policies []string `json:"policies"`
	// user or group
	Type string `json:"type"`
}

type _ApplyPolicy ApplyPolicy

// NewApplyPolicy instantiates a new ApplyPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyPolicy(name string, policies []string, type_ string) *ApplyPolicy {
	this := ApplyPolicy{}
	this.Name = name
	this.Policies = policies
	this.Type = type_
	return &this
}

// NewApplyPolicyWithDefaults instantiates a new ApplyPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyPolicyWithDefaults() *ApplyPolicy {
	this := ApplyPolicy{}
	return &this
}

// GetName returns the Name field value
func (o *ApplyPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplyPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplyPolicy) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
func (o *ApplyPolicy) GetPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *ApplyPolicy) GetPoliciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *ApplyPolicy) SetPolicies(v []string) {
	o.Policies = v
}

// GetType returns the Type field value
func (o *ApplyPolicy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApplyPolicy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApplyPolicy) SetType(v string) {
	o.Type = v
}

func (o ApplyPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["policies"] = o.Policies
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApplyPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"policies",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplyPolicy := _ApplyPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplyPolicy)

	if err != nil {
		return err
	}

	*o = ApplyPolicy(varApplyPolicy)

	return err
}

type NullableApplyPolicy struct {
	value *ApplyPolicy
	isSet bool
}

func (v NullableApplyPolicy) Get() *ApplyPolicy {
	return v.value
}

func (v *NullableApplyPolicy) Set(val *ApplyPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyPolicy(val *ApplyPolicy) *NullableApplyPolicy {
	return &NullableApplyPolicy{value: val, isSet: true}
}

func (v NullableApplyPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


