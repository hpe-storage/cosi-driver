/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EditBucketBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditBucketBody{}

// EditBucketBody Edit bucket request body
type EditBucketBody struct {
	// Field to enable or disable compression for the bucket
	Compression *string `json:"compression,omitempty"`
	// Tags for the bucket
	Tags []BucketTagsInner `json:"tags,omitempty"`
}

// NewEditBucketBody instantiates a new EditBucketBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditBucketBody() *EditBucketBody {
	this := EditBucketBody{}
	return &this
}

// NewEditBucketBodyWithDefaults instantiates a new EditBucketBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditBucketBodyWithDefaults() *EditBucketBody {
	this := EditBucketBody{}
	return &this
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *EditBucketBody) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditBucketBody) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *EditBucketBody) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *EditBucketBody) SetCompression(v string) {
	o.Compression = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditBucketBody) GetTags() []BucketTagsInner {
	if o == nil {
		var ret []BucketTagsInner
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditBucketBody) GetTagsOk() ([]BucketTagsInner, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EditBucketBody) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []BucketTagsInner and assigns it to the Tags field.
func (o *EditBucketBody) SetTags(v []BucketTagsInner) {
	o.Tags = v
}

func (o EditBucketBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditBucketBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableEditBucketBody struct {
	value *EditBucketBody
	isSet bool
}

func (v NullableEditBucketBody) Get() *EditBucketBody {
	return v.value
}

func (v *NullableEditBucketBody) Set(val *EditBucketBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEditBucketBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEditBucketBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditBucketBody(val *EditBucketBody) *NullableEditBucketBody {
	return &NullableEditBucketBody{value: val, isSet: true}
}

func (v NullableEditBucketBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditBucketBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


