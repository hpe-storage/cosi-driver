/*
Tasks REST APIs

APIs to get information about the tasks

API version: 0.1.0
Contact: sc-eng-tasks-ms@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskList{}

// TaskList struct for TaskList
type TaskList struct {
	Items []Task `json:"items"`
	// The limit query parameter specified in the request.
	PageLimit *int32 `json:"pageLimit,omitempty"`
	// The offset query parameter specified in the request.
	PageOffset *int32 `json:"pageOffset,omitempty"`
	// Total number of items matching the filter query parameter in the request.
	Total *int32 `json:"total,omitempty"`
}

type _TaskList TaskList

// NewTaskList instantiates a new TaskList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskList(items []Task) *TaskList {
	this := TaskList{}
	this.Items = items
	return &this
}

// NewTaskListWithDefaults instantiates a new TaskList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskListWithDefaults() *TaskList {
	this := TaskList{}
	return &this
}

// GetItems returns the Items field value
func (o *TaskList) GetItems() []Task {
	if o == nil {
		var ret []Task
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TaskList) GetItemsOk() ([]Task, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TaskList) SetItems(v []Task) {
	o.Items = v
}

// GetPageLimit returns the PageLimit field value if set, zero value otherwise.
func (o *TaskList) GetPageLimit() int32 {
	if o == nil || IsNil(o.PageLimit) {
		var ret int32
		return ret
	}
	return *o.PageLimit
}

// GetPageLimitOk returns a tuple with the PageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskList) GetPageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.PageLimit) {
		return nil, false
	}
	return o.PageLimit, true
}

// HasPageLimit returns a boolean if a field has been set.
func (o *TaskList) HasPageLimit() bool {
	if o != nil && !IsNil(o.PageLimit) {
		return true
	}

	return false
}

// SetPageLimit gets a reference to the given int32 and assigns it to the PageLimit field.
func (o *TaskList) SetPageLimit(v int32) {
	o.PageLimit = &v
}

// GetPageOffset returns the PageOffset field value if set, zero value otherwise.
func (o *TaskList) GetPageOffset() int32 {
	if o == nil || IsNil(o.PageOffset) {
		var ret int32
		return ret
	}
	return *o.PageOffset
}

// GetPageOffsetOk returns a tuple with the PageOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskList) GetPageOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.PageOffset) {
		return nil, false
	}
	return o.PageOffset, true
}

// HasPageOffset returns a boolean if a field has been set.
func (o *TaskList) HasPageOffset() bool {
	if o != nil && !IsNil(o.PageOffset) {
		return true
	}

	return false
}

// SetPageOffset gets a reference to the given int32 and assigns it to the PageOffset field.
func (o *TaskList) SetPageOffset(v int32) {
	o.PageOffset = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *TaskList) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskList) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *TaskList) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *TaskList) SetTotal(v int32) {
	o.Total = &v
}

func (o TaskList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	if !IsNil(o.PageLimit) {
		toSerialize["pageLimit"] = o.PageLimit
	}
	if !IsNil(o.PageOffset) {
		toSerialize["pageOffset"] = o.PageOffset
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *TaskList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskList := _TaskList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskList)

	if err != nil {
		return err
	}

	*o = TaskList(varTaskList)

	return err
}

type NullableTaskList struct {
	value *TaskList
	isSet bool
}

func (v NullableTaskList) Get() *TaskList {
	return v.value
}

func (v *NullableTaskList) Set(val *TaskList) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskList) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskList(val *TaskList) *NullableTaskList {
	return &NullableTaskList{value: val, isSet: true}
}

func (v NullableTaskList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


