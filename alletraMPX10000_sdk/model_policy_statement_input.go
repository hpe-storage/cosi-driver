/*
Device Type-7 APIs

APIs to get information about the HPE Alletra Storage MP X10000 system

API version: 0.1.0
Contact: object-svc-team@hpe.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyStatementInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyStatementInput{}

// PolicyStatementInput device-type7 access policy statements schema for create/update input
type PolicyStatementInput struct {
	Action []string `json:"action"`
	Condition *map[string]map[string]PolicyConditionValue `json:"condition,omitempty"`
	Effect string `json:"effect"`
	Resource PolicyStatementInputResource `json:"resource"`
	Sid *string `json:"sid,omitempty"`
}

type _PolicyStatementInput PolicyStatementInput

// NewPolicyStatementInput instantiates a new PolicyStatementInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyStatementInput(action []string, effect string, resource PolicyStatementInputResource) *PolicyStatementInput {
	this := PolicyStatementInput{}
	this.Action = action
	this.Effect = effect
	this.Resource = resource
	return &this
}

// NewPolicyStatementInputWithDefaults instantiates a new PolicyStatementInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyStatementInputWithDefaults() *PolicyStatementInput {
	this := PolicyStatementInput{}
	return &this
}

// GetAction returns the Action field value
func (o *PolicyStatementInput) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PolicyStatementInput) GetActionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *PolicyStatementInput) SetAction(v []string) {
	o.Action = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *PolicyStatementInput) GetCondition() map[string]map[string]PolicyConditionValue {
	if o == nil || IsNil(o.Condition) {
		var ret map[string]map[string]PolicyConditionValue
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyStatementInput) GetConditionOk() (*map[string]map[string]PolicyConditionValue, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *PolicyStatementInput) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given map[string]map[string]PolicyConditionValue and assigns it to the Condition field.
func (o *PolicyStatementInput) SetCondition(v map[string]map[string]PolicyConditionValue) {
	o.Condition = &v
}

// GetEffect returns the Effect field value
func (o *PolicyStatementInput) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *PolicyStatementInput) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *PolicyStatementInput) SetEffect(v string) {
	o.Effect = v
}

// GetResource returns the Resource field value
func (o *PolicyStatementInput) GetResource() PolicyStatementInputResource {
	if o == nil {
		var ret PolicyStatementInputResource
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *PolicyStatementInput) GetResourceOk() (*PolicyStatementInputResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *PolicyStatementInput) SetResource(v PolicyStatementInputResource) {
	o.Resource = v
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *PolicyStatementInput) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyStatementInput) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *PolicyStatementInput) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *PolicyStatementInput) SetSid(v string) {
	o.Sid = &v
}

func (o PolicyStatementInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyStatementInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	toSerialize["effect"] = o.Effect
	toSerialize["resource"] = o.Resource
	if !IsNil(o.Sid) {
		toSerialize["sid"] = o.Sid
	}
	return toSerialize, nil
}

func (o *PolicyStatementInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"effect",
		"resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyStatementInput := _PolicyStatementInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyStatementInput)

	if err != nil {
		return err
	}

	*o = PolicyStatementInput(varPolicyStatementInput)

	return err
}

type NullablePolicyStatementInput struct {
	value *PolicyStatementInput
	isSet bool
}

func (v NullablePolicyStatementInput) Get() *PolicyStatementInput {
	return v.value
}

func (v *NullablePolicyStatementInput) Set(val *PolicyStatementInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyStatementInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyStatementInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyStatementInput(val *PolicyStatementInput) *NullablePolicyStatementInput {
	return &NullablePolicyStatementInput{value: val, isSet: true}
}

func (v NullablePolicyStatementInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyStatementInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


